{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22 You can open any file in your project in a similar way by using \b Ctrl+Shift+N\b0  (Navigate | File)\par
The Code Completion feature lets you quickly complete different kinds of statements in the code. For example, start typing a class name and press \b Ctrl+Space \b0 to complete it. When multiple choices are available, they are shown in the lookup list.\par
 special variant of the Code Completion feature invoked by pressing \b Ctrl+Space twice allows \b0 you to complete the name of any class no matter if it was imported in the current file or not. If the class is not imported yet, the import statement is generated automatically.\par
You can quickly find all places where a particular class, method or variable is used in the whole project by positioning the caret at the symbol's name or at its usage in code and pressing \b Alt+F7 \b0 (Find Usages in the popup menu)\par
To quickly see the documentation for the symbol at caret, press \b Ctrl+Q \b0 (View | Quick Documentation).\par
To navigate to the declaration of a class, method or variable used somewhere in the code, position the caret at the usage and press \b Ctrl+B\b0 . You can also click the mouse on usages with the Ctrl key pressed to jump to declarations.\par
u can quickly navigate in the currently edited file with \b Ctrl+F12 \b0 (Navigate | File Structure).\par
It shows the list of members of the current class. Select an element you want to navigate to and press the \b Enter key\b0  or the \b F4 \b0 key.\par
To easily locate an item in the list, just start typing its name.\par
You can easily rename your local variables with automatic correction of all places where they are used.\par
To try it, place the caret at the variable you want to rename, and press \b Shift+F6 \b0 (\b Refactor | Rename\b0 ). Type the new name in the popup window that appears, or select one of the suggested names, and press \b Enter\b0 .\par
When using Code Completion, you can accept the currently highlighted selection in the popup list with \b Tab\b0  key.\par
Unlike accepting with the \b Enter\b0  key, the selected name will overwrite the rest of the name to the right of the caret. This can be especially useful for replacing one method or variable name with another.\par
Did you know that you can close tabs in the editor and the tool windows of PyCharm without actually using the context menu commands? It is enough to point with your mouse cursor to a tab to be closed, and click the middle mouse button, or just use the \b Shift+click \b0 combination.\par
To quickly select the currently edited element (class, file, method or field) in any view (Project view, Structure view or other), press \b Alt+F1\b0 .\par
The speed search is available in all the tree views: just start typing and you'll quickly locate the necessary item.\par
The \b Escape \b0 key in any tool window moves the focus to the editor.\par
\b Shift+Escape \b0 moves the focus to the editor and also hides the current (or last active) tool window.\par
The \b F12 \b0 key moves the focus from the editor to the last focused tool window.\par
\b Ctrl+W \b0 (\b extend selection\b0 ) in the editor selects the word at the caret and then selects expanding areas of the source code. For example, it may select a method name, then the expression that calls this method, then the whole statement, then the containing block, etc. You can also select the word at the caret and the expanding areas of the source code by double-clicking the target areas in the editor.\par
The Extract Variable refactoring helps you simplify complicated statements in your code. For example, in the code fragment below, you can select an expression in the code, and press \b Ctrl+Alt+V \b0 (Refactor | Extract | Variable).\par
\b Ctrl+D \b0 in the editor duplicates the selected block or the current line when no block is selected.\par
The Code | Move Statement Up/Down action is useful for reorganizing the code lines in your file, e.g., for bringing a variable declaration closer to the variable usage.\par
For example, select a code fragment and press \b Ctrl+Shift+Up \b0 or \b Ctrl+Shift+Down.\b0\par
Before:\par
 \par
After moving the lines up:\par
 \par
After moving the lines down:\par
 \par
When there is no selection, the line at the cursor will be moved.\par
The \b Ctrl+Shift+J \b0 shortcut joins two lines into one and removes unnecessary spaces to match your code style.\par
If the cursor is between the parentheses of a method call, pressing \b Ctrl+P \b0 brings up a list of valid parameters.\par
\b Ctrl+Shift+Backspace \b0 (Navigate | Last Edit Location) brings you back to the last place where you made changes in the code.\par
Pressing \b Ctrl+Shift+Backspace \b0 a few times moves you deeper into your changes history.\par
Use \b Ctrl+Shift+F7 \b0 (Edit | Find | Highlight Usages in File) to quickly highlight usages of some variable in the current file.\par
Use \b F3 and Shift+F3 \b0 keys to navigate through highlighted usages.\par
Press Escape to remove highlighting.\par
To see your local history of changes in a file, invoke \b Local History | Show History \b0 from the context menu. You can navigate through different file versions, see the differences and roll back to any previous version.\par
Use the same context menu item to see the history of changes on a directory. You will never lose any code with this feature!\par
\b Ctrl+E \b0 (View | Recent Files) brings a popup list of the recently visited files. Choose the desired file and press Enter to open it.\par
Besides recent files, you can bring up results of the usage searches you have performed recently. To do that, use the same\b  Ctrl+E \b0 shortcut with the Find tool window having the focus, and select the desired find usages result from the Recent Find Usages popup.\par
To show separator lines between methods in the editor, open the editor settings and select the\b  Show \b0 method separators check box in the\b  Appearance \b0 page.\par
When using basic code completion (\b Ctrl+Space\b0 ), type any characters that exist anywhere in an identifier.\par
Use\b  Alt+Up \b0 and\b  Alt+Down \b0 keys to quickly move between methods in the editor.\par
Use the \b Ctrl+Shift+V \b0 shortcut to choose and insert recent clipboard contents into the text.\par
The shortcuts such as \b Ctrl+Q\b0  (View | Quick Documentation), \b Ctrl+P \b0 (View | Parameter Info), \b Ctrl+B\b0  (Navigate | Declaration) and others can be used not only in the editor but in the code completion popup list as well.\par
You can easily override the methods of the base class by pressing\b  Ctrl+O \b0 (Code | Override Methods).\par
To open any particular method or field in the editor quickly, press \b Ctrl+Alt+Shift+N \b0 (Navigate | Symbol) and start typing its name.\par
Choose symbol from the drop-down list that appears.\par
Use \b Alt+Shift+C\b0  to quickly review your recent changes to the project.\par
Use Basic Completion (\b Ctrl+Space\b0 ) within HTML, CSS and other files, for completing image file names.\par
With a single keystroke, you can apply another code style/coloring scheme or keymap right from the editor. Just press \b Ctrl+` (View | Quick Switch Scheme\b0 ), to specify the scheme you want to change.\par
When in the \b Go to Class\b0 , \b Go to Symbol\b0 , or \b Go to File popup\b0 , you can ease the search by filtering the lookup list with the help of the "\b camel words\b0 " prefixes.\par
You can easily make column selection by dragging your mouse pointer while keeping the\b  Alt key \b0 pressed.\par
You don't need to guess which \b __init__.py \b0 or \b views.py \b0 you are looking at...\par
Make the editor tabs and the lines in navigation lists stand out using the\b  File Colors \b0 page of the Appearance & Behavior settings.\par
If nothing is selected in the editor, and you press \b Ctrl+C\b0 , then the whole line at caret is copied to the clipboard.\par
If you don't want to commit some of your changes to the repository, you can set them aside for a while, by moving to a separate changelist, or by putting them to a shelf. Select such file in the \b Local\b0  tab of the \b Changes\b0  tool window, and on the context menu choose \b Move to another changelist\b0 , or \b Shelve Changes\b0 .\par
You can move any file to a changelist of your choice. To do that, just choose \b Move to Changelist \b0 on the file context menu in the Local Changes tab of the Version Control tool window:\par
}
 